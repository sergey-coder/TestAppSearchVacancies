/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package service.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import service.model.Vacancies;

import service.service.VacanciesLocalService;

import service.service.persistence.VacanciesPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the vacancies local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link service.service.impl.VacanciesLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see service.service.impl.VacanciesLocalServiceImpl
 * @see service.service.VacanciesLocalServiceUtil
 * @generated
 */
public abstract class VacanciesLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements VacanciesLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link service.service.VacanciesLocalServiceUtil} to access the vacancies local service.
	 */

	/**
	 * Adds the vacancies to the database. Also notifies the appropriate model listeners.
	 *
	 * @param vacancies the vacancies
	 * @return the vacancies that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Vacancies addVacancies(Vacancies vacancies)
		throws SystemException {
		vacancies.setNew(true);

		return vacanciesPersistence.update(vacancies);
	}

	/**
	 * Creates a new vacancies with the primary key. Does not add the vacancies to the database.
	 *
	 * @param idVacancies the primary key for the new vacancies
	 * @return the new vacancies
	 */
	@Override
	public Vacancies createVacancies(long idVacancies) {
		return vacanciesPersistence.create(idVacancies);
	}

	/**
	 * Deletes the vacancies with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param idVacancies the primary key of the vacancies
	 * @return the vacancies that was removed
	 * @throws PortalException if a vacancies with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Vacancies deleteVacancies(long idVacancies)
		throws PortalException, SystemException {
		return vacanciesPersistence.remove(idVacancies);
	}

	/**
	 * Deletes the vacancies from the database. Also notifies the appropriate model listeners.
	 *
	 * @param vacancies the vacancies
	 * @return the vacancies that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Vacancies deleteVacancies(Vacancies vacancies)
		throws SystemException {
		return vacanciesPersistence.remove(vacancies);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Vacancies.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return vacanciesPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link service.model.impl.VacanciesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return vacanciesPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link service.model.impl.VacanciesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return vacanciesPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return vacanciesPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return vacanciesPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Vacancies fetchVacancies(long idVacancies) throws SystemException {
		return vacanciesPersistence.fetchByPrimaryKey(idVacancies);
	}

	/**
	 * Returns the vacancies with the primary key.
	 *
	 * @param idVacancies the primary key of the vacancies
	 * @return the vacancies
	 * @throws PortalException if a vacancies with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Vacancies getVacancies(long idVacancies)
		throws PortalException, SystemException {
		return vacanciesPersistence.findByPrimaryKey(idVacancies);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return vacanciesPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the vacancieses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link service.model.impl.VacanciesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of vacancieses
	 * @param end the upper bound of the range of vacancieses (not inclusive)
	 * @return the range of vacancieses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Vacancies> getVacancieses(int start, int end)
		throws SystemException {
		return vacanciesPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of vacancieses.
	 *
	 * @return the number of vacancieses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getVacanciesesCount() throws SystemException {
		return vacanciesPersistence.countAll();
	}

	/**
	 * Updates the vacancies in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param vacancies the vacancies
	 * @return the vacancies that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Vacancies updateVacancies(Vacancies vacancies)
		throws SystemException {
		return vacanciesPersistence.update(vacancies);
	}

	/**
	 * Returns the vacancies local service.
	 *
	 * @return the vacancies local service
	 */
	public service.service.VacanciesLocalService getVacanciesLocalService() {
		return vacanciesLocalService;
	}

	/**
	 * Sets the vacancies local service.
	 *
	 * @param vacanciesLocalService the vacancies local service
	 */
	public void setVacanciesLocalService(
		service.service.VacanciesLocalService vacanciesLocalService) {
		this.vacanciesLocalService = vacanciesLocalService;
	}

	/**
	 * Returns the vacancies remote service.
	 *
	 * @return the vacancies remote service
	 */
	public service.service.VacanciesService getVacanciesService() {
		return vacanciesService;
	}

	/**
	 * Sets the vacancies remote service.
	 *
	 * @param vacanciesService the vacancies remote service
	 */
	public void setVacanciesService(
		service.service.VacanciesService vacanciesService) {
		this.vacanciesService = vacanciesService;
	}

	/**
	 * Returns the vacancies persistence.
	 *
	 * @return the vacancies persistence
	 */
	public VacanciesPersistence getVacanciesPersistence() {
		return vacanciesPersistence;
	}

	/**
	 * Sets the vacancies persistence.
	 *
	 * @param vacanciesPersistence the vacancies persistence
	 */
	public void setVacanciesPersistence(
		VacanciesPersistence vacanciesPersistence) {
		this.vacanciesPersistence = vacanciesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("service.model.Vacancies",
			vacanciesLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"service.model.Vacancies");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Vacancies.class;
	}

	protected String getModelClassName() {
		return Vacancies.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = vacanciesPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = service.service.VacanciesLocalService.class)
	protected service.service.VacanciesLocalService vacanciesLocalService;
	@BeanReference(type = service.service.VacanciesService.class)
	protected service.service.VacanciesService vacanciesService;
	@BeanReference(type = VacanciesPersistence.class)
	protected VacanciesPersistence vacanciesPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private VacanciesLocalServiceClpInvoker _clpInvoker = new VacanciesLocalServiceClpInvoker();
}